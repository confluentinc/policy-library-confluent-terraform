import "tfplan/v2" as tfplan

# ------------------------------------------------------------
# Name:     allow_approved_resources.sentinel
# Author:   Simon Duff <sduff@confluent.io>
# Provider: confluentinc/confluent
# ------------------------------------------------------------
# Allow only approved resources to be created. Note that if
# additional providers are being used (such as aws or azure)
# those resources (such as keyvaults) should also be included
# in this list.
# ------------------------------------------------------------

param approved_resources default [
# Resources as of v1.32.0
  "confluent_api_key",
# "confluent_cluster_link",
  "confluent_connector",
# "confluent_environment",
# "confluent_identity_pool",
# "confluent_identity_provider",
# "confluent_kafka_acl",
  "confluent_kafka_client_quota",
  "confluent_kafka_cluster",
  "confluent_kafka_cluster_config",
# "confluent_kafka_mirror_topic",
  "confluent_kafka_topic",
# "confluent_ksql_cluster",
# "confluent_network",
# "confluent_peering",
# "confluent_private_link_access",
  "confluent_role_binding",
  "confluent_schema",
# "confluent_schema_registry_cluster",
# "confluent_schema_registry_cluster_config",
# "confluent_schema_registry_cluster_mode",
  "confluent_service_account",
# "confluent_subject_config",
# "confluent_subject_mode",
# "confluent_transit_gateway_attachment",
]

# all new resources
all_new_resources = filter tfplan.resource_changes as _, resource_changes {
  "create" in resource_changes.change.actions and
  resource_changes.mode is "managed"
}

# resources in the approved list
approved_resources = filter all_new_resources as _, res {
  res.type in approved_resources
}

main = rule {
  length(approved_resources) == length(all_new_resources)
}

# return true if the plan should fail
main_fail = rule {
  length(approved_resources) == 0
}
print(main_fail)
